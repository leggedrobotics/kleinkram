version: '3.8'

services:
    api-server:
        image: rslethz/kleinkram:api-server-dev
        container_name: kleinkram-api-server

        build:
            context: .
            dockerfile: ./backend/prod.Dockerfile

        ports:
            - 127.0.0.1:${SERVER_PORT}:${SERVER_PORT}

        env_file:
            - .env

        volumes:
            - swagger-spec:/usr/src/app/backend/docs

        networks:
            - webnet
            - privatenet

        environment:
            DEVBUILD: 'false'

        depends_on:
            - database

    database:
        image: postgres:17
        container_name: kleinkram-postgres

        ports:
            - '5432:5432'

        networks:
            - privatenet

        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}

        volumes:
            - postgres_db_data:/var/lib/postgresql/data

    minio:
        image: minio/minio
        container_name: kleinkram-minio

        volumes:
            - minio_data:/data

        environment:
            MINIO_ROOT_USER: ${MINIO_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}

        command: >
            -c "mkdir -p /data/${MINIO_BAG_BUCKET_NAME} &&
            mkdir -p /data/${MINIO_MCAP_BUCKET_NAME} && 
            mkdir -p /data/${MINIO_DB_BUCKET_NAME} &&
            /usr/bin/minio server --console-address ':9001' /data & 
            sleep 10 &&
            mc alias set myminio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD} &&
            mc admin user svcacct add --access-key '${MINIO_ACCESS_KEY}' --secret-key '${MINIO_SECRET_KEY}' myminio ${MINIO_USER} || true &&
            echo 'minio is ready' &&
            sleep infinity"

        ports:
            - '127.0.0.1:9000:9000' # file storage
            - '127.0.0.1:9001:9001' # management console
        networks:
            - webnet
            - privatenet

    frontend:
        image: rslethz/kleinkram:frontend-dev
        container_name: kleinkram-frontend

        build:
            context: .
            dockerfile: ./frontend/Dockerfile
            args:
                - QUASAR_ENDPOINT=${QUASAR_ENDPOINT}

        ports:
            - '8003:80'

        networks:
            - webnet

    redis:
        image: redis:latest
        container_name: kleinkram-redis
        ports:
            - '6379:6379'
        networks:
            - privatenet

    queue-consumer:
        image: rslethz/kleinkram:queue-consumer-dev
        container_name: kleinkram-queue-consumer
        build:
            context: .
            dockerfile: ./queueConsumer/prod.Dockerfile
        env_file:
            - .env
        networks:
            - privatenet
        depends_on:
            - database
            - loki
        volumes:
            # mount docker socket to access docker from within the container
            - /var/run/docker.sock:/var/run/docker.sock
    prometheus:
        image: prom/prometheus
        container_name: kleinkram-prometheus
        volumes:
            - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - logging-prometheus-storage:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.enable-remote-write-receiver'
            - '--enable-feature=exemplar-storage'
            - '--enable-feature=native-histograms'
        ports:
            - '9090:9090'
        networks:
            - privatenet

    tempo:
        user: '0:0'
        image: grafana/tempo:latest
        container_name: kleinkram-tempo
        command: ['-config.file=/etc/tempo/tempo.yml']
        volumes:
            - ./observability/tempo/tempo.yml:/etc/tempo/tempo.yml
            - logging-tempo-data:/tmp/tempo
        ports:
            - '3200' # tempo
            - '4317' # otlp grpc
            - '4318' # otlp http
        networks:
            - privatenet

    loki:
        image: grafana/loki
        container_name: kleinkram-loki
        ports:
            - '3100:3100'
        command:
            - --config.file=/mnt/config/loki-config.yml
        volumes:
            - ./observability/loki/loki-config.yml:/mnt/config/loki-config.yml:ro
        networks:
            - privatenet

    grafana:
        image: grafana/grafana
        container_name: kleinkram-grafana
        volumes:
            - logging-grafana-storage:/var/lib/grafana
            - ./observability/grafana/provisioning:/etc/grafana/provisioning

        environment:
            - GF_LOG_LEVEL=debug
        ports:
            - '9050:3000' # localhost:9050 for accessing grafana
        networks:
            - privatenet

    documentation:
        depends_on:
            - api-server
        image: rslethz/kleinkram:docs-dev
        container_name: kleinkram-documentation
        volumes:
            - swagger-spec:/app/src/docs/
        build:
            context: docs/.
            dockerfile: Dockerfile
            args:
                - MODE=staging

    artifact-uploader:
        image: rslethz/kleinkram:artifact-uploader-dev
        build:
            context: queueConsumer/src/artifactUpload
            dockerfile: Dockerfile

volumes:
    postgres_db_data:
    minio_data:
    logging-prometheus-storage:
    logging-grafana-storage:
    logging-tempo-data:
    swagger-spec:

networks:
    webnet:
    privatenet:
