services:
    main:
        image: rslethz/grandtour-datasets:api-server-latest
        container_name: API
        build:
            context: .
            dockerfile: backend/Dockerfile
        volumes:
            - ./backend:/usr/src/app/backend
            - /usr/src/app/node_modules
        ports:
            - 127.0.0.1:${SERVER_PORT}:${SERVER_PORT}
        env_file:
            - .env
        networks:
            - webnet
            - privatenet
        depends_on:
            - database

    database:
        image: postgres:13
        container_name: postgres_db
        ports:
            - '5432:5432'
        networks:
            - privatenet
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - db_data:/var/lib/postgresql/data

    minio:
        image: minio/minio
        volumes:
            - minio_data:/data
        environment:
            MINIO_ROOT_USER: ${MINIO_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
        command: server --console-address ":9001" /data
        ports:
            - '127.0.0.1:9000:9000'
            - '127.0.0.1:9001:9001'
        networks:
            - webnet
            - privatenet

    frontend:
        image: rslethz/grandtour-datasets:vuejs_frontend-latest
        build:
            context: .
            dockerfile: ./frontend/dev.Dockerfile
            args:
                - QUASAR_ENDPOINT=${QUASAR_ENDPOINT}
        container_name: vuejs_frontend
        ports:
            - '8003:8003'

        env_file:
            - .env

        develop:
            watch:
                - action: sync
                  path: ./frontend
                  target: /app

        networks:
            - webnet

    redis:
        image: redis:latest
        ports:
            - '6379:6379'
        networks:
            - privatenet

    bullconsumer:
        image: rslethz/grandtour-datasets:bull-consumer-latest
        container_name: bullconsumer
        build:
            context: .
            dockerfile: queueConsumer/Dockerfile
        volumes:
            - ./queueConsumer:/usr/src/queueConsumer
            - /usr/src/queueConsumer/node_modules
            - /usr/src/queueConsumer/dist
            # mount docker socket to access docker from within the container
            - /var/mission/docker.sock:/var/mission/docker.sock
        develop:
            watch:
                - action: rebuild
                  path: .
                  target: /usr/src/queueConsumer
        env_file:
            - .env
        networks:
            - privatenet
        depends_on:
            - database
            - loki

    prometheus:
        image: prom/prometheus
        volumes:
            - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - logging-prometheus-storage:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
        ports:
            - '9090:9090'
        networks:
            - privatenet
            - webnet

    tempo:
        user: '0:0'
        image: grafana/tempo:latest
        command: ['-config.file=/etc/tempo/tempo.yml']
        volumes:
            - ./observability/tempo/tempo.yml:/etc/tempo/tempo.yml
            - logging-tempo-data:/tmp/tempo
        ports:
            - '3200' # tempo
            - '4317' # otlp grpc
            - '4318' # otlp http
        networks:
            - privatenet
            - webnet

    loki:
        image: grafana/loki
        container_name: loki
        ports:
            - '3100:3100'
        command:
            - --config.file=/mnt/config/loki-config.yml
        volumes:
            - ./observability/loki/loki-config.yml:/mnt/config/loki-config.yml:ro
        networks:
            - privatenet
            - webnet

    grafana:
        image: grafana/grafana
        volumes:
            - logging-grafana-storage:/var/lib/grafana
            - ./observability/grafana/provisioning:/etc/grafana/provisioning

        environment:
            - GF_LOG_LEVEL=critical
        ports:
            - '9050:3000' # localhost:9050 for accessing grafana
        networks:
            - privatenet
            - webnet

    docs:
        build:
            context: docs/.
            dockerfile: local-dev.Dockerfile
        ports:
            - "4000:4000"
        volumes:
            - ./docs:/app/src
            - vitepress_dist:/app/src/.vitepress/dist
            - node_modules:/app/src/node_modules

volumes:
    db_data:
    minio_data:
    logging-prometheus-storage:
    logging-grafana-storage:
    logging-tempo-data:
    vitepress_dist:
    node_modules:

networks:
    webnet:
    privatenet:
