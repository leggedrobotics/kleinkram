services:
    api-server:
        container_name: kleinkram-api-server

        build:
            context: .
            dockerfile: backend/Dockerfile

        volumes:
            - ./backend:/usr/src/app/backend
            - ./common:/usr/src/app/common
            - backend_dist:/usr/src/app/backend/dist

        ports:
            - 127.0.0.1:${SERVER_PORT}:${SERVER_PORT}

        env_file:
            - .env

        networks:
            - public-network
            - private-network

        environment:
            DEVBUILD: 'true'

        depends_on:
            - database
            - minio
            - redis

    database:
        image: postgres:16

        container_name: kleinkram-postgres

        ports:
            - '5432:5432'

        networks:
            - private-network

        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}

        volumes:
            - db_data:/var/lib/postgresql/data

    minio:
        image: minio/minio

        container_name: kleinkram-minio

        volumes:
            - minio_data:/data

        environment:
            MINIO_ROOT_USER: ${MINIO_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
            MINIO_PROMETHEUS_AUTH_TYPE: 'public'

        entrypoint: sh

        # initialize buckets (see https://github.com/minio/minio/issues/4769#issuecomment-331033735)
        # and add service worker access key after startup of the minio server
        command: >
            -c "mkdir -p /data/${MINIO_BAG_BUCKET_NAME} &&
            mkdir -p /data/${MINIO_MCAP_BUCKET_NAME} && 
            mkdir -p /data/${MINIO_DB_BUCKET_NAME} &&
            /usr/bin/minio server --console-address ':9001' /data & 
            sleep 10 &&
            mc alias set myminio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD} &&
            mc admin user svcacct add --access-key '${MINIO_ACCESS_KEY}' --secret-key '${MINIO_SECRET_KEY}' myminio ${MINIO_USER} || true &&
            echo 'minio is ready' &&
            sleep infinity"

        ports:
            - '127.0.0.1:9000:9000'
            - '127.0.0.1:9001:9001'

        networks:
            - public-network
            - private-network

    frontend:
        container_name: kleinkram-frontend

        build:
            context: .
            dockerfile: ./frontend/dev.Dockerfile
            args:
                - QUASAR_ENDPOINT=${QUASAR_ENDPOINT}

        ports:
            - '8003:8003'

        env_file:
            - .env

        develop:
            watch:
                - action: sync
                  path: ./frontend
                  target: /app/frontend
                  ignore:
                      - node_modules/
                      - dist/
                - action: sync
                  path: ./common
                  target: /app/common
                  ignore:
                      - node_modules/
                      - dist/
                - action: sync
                  path: ./common/frontend_shared
                  target: /app/frontend/frontend_shared

        depends_on:
            - api-server
            - minio

        networks:
            - public-network

    redis:
        image: redis:latest

        container_name: kleinkram-redis

        ports:
            - '6379:6379'

        networks:
            - private-network

    queue-consumer:
        container_name: kleinkram-queue-consumer

        build:
            context: .
            dockerfile: queueConsumer/Dockerfile

        volumes:
            - ./queueConsumer:/usr/src/queueConsumer
            - ./common:/usr/src/common
            - /usr/src/queueConsumer/node_modules
            - queue-consumer-dist:/usr/src/queueConsumer/dist
            # mount docker socket to access docker from within the container
            - /var/run/docker.sock:/var/run/docker.sock

        develop:
            watch:
                - action: sync
                  path: ./queueConsumer
                  target: /usr/src/queueConsumer
                  ignore:
                      - node_modules/
                      - dist/

        env_file:
            - .env

        networks:
            - private-network

        depends_on:
            - database
            - redis

    prometheus:
        image: prom/prometheus
        container_name: kleinkram-prometheus
        volumes:
            - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - logging-prometheus-storage:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.enable-remote-write-receiver'
        ports:
            - '9090:9090'
        networks:
            - private-network
            - public-network

    tempo:
        user: '0:0'
        image: grafana/tempo:latest
        container_name: kleinkram-tempo
        command: ['-config.file=/etc/tempo/tempo.yml']
        volumes:
            - ./observability/tempo/tempo.yml:/etc/tempo/tempo.yml
            - logging-tempo-data:/tmp/tempo
        ports:
            - '3200' # tempo
            - '4317' # otlp grpc
            - '4318' # otlp http
        networks:
            - private-network
            - public-network

    loki:
        image: grafana/loki
        container_name: kleinkram-loki
        ports:
            - '3100:3100'
        command:
            - --config.file=/mnt/config/loki-config.yml
        volumes:
            - ./observability/loki/loki-config.yml:/mnt/config/loki-config.yml:ro
        networks:
            - private-network
            - public-network

    grafana:
        image: grafana/grafana
        container_name: kleinkram-grafana
        volumes:
            - logging-grafana-storage:/var/lib/grafana
            - ./observability/grafana/provisioning:/etc/grafana/provisioning
            - ./observability/grafana/dashboards:/etc/dashboards

        environment:
            # since this is a local dev environment, we disable login form and enable anonymous access
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
            - GF_AUTH_DISABLE_LOGIN_FORM=true
            # to keep our logs clean, we only log critical messages
            - GF_LOG_LEVEL=critical
        ports:
            - '9050:3000' # localhost:9050 for accessing grafana
        networks:
            - private-network
            - public-network

    docs:
        container_name: kleinkram-docs
        depends_on:
            - api-server
        build:
            context: docs/.
            dockerfile: local-dev.Dockerfile
        environment:
            DEVBUILD: 'true'
        ports:
            - '4000:4000'
        volumes:
            - ./docs:/app/src
            - vitepress_dist:/app/src/.vitepress/dist
            - node_modules:/app/src/node_modules
            - ./backend/docs:/app/src/docs/

    artifactUploader:
        container_name: kleinkram-artifact-uploader
        image: rslethz/grandtour-datasets:artifact-uploader-latest
        build:
            context: queueConsumer/src/artifactUpload
            dockerfile: Dockerfile

    postgres-exporter:
        image: prometheuscommunity/postgres-exporter
        container_name: kleinkram-postgres-exporter
        ports:
            - 9187:9187
        env_file:
            - .env
        links:
            - database
            - prometheus
        networks:
            - private-network

volumes:
    db_data:
    minio_data:
    logging-prometheus-storage:
    logging-grafana-storage:
    logging-tempo-data:
    vitepress_dist:
    node_modules:
    backend_dist:
    queue-consumer-dist:

networks:
    public-network:
    private-network:
